{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1","program":"/home/austen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","markup5ever","/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1cb14e63b265e005","-C","extra-filename=-1cb14e63b265e005","--out-dir","/home/austen/Documents/school/research/scraper/target/rls/debug/deps","-L","dependency=/home/austen/Documents/school/research/scraper/target/rls/debug/deps","--extern","log=/home/austen/Documents/school/research/scraper/target/rls/debug/deps/liblog-7c6fd37128d9f40d.rmeta","--extern","phf=/home/austen/Documents/school/research/scraper/target/rls/debug/deps/libphf-336d966bab33cc28.rmeta","--extern","string_cache=/home/austen/Documents/school/research/scraper/target/rls/debug/deps/libstring_cache-f67c59c505a18100.rmeta","--extern","tendril=/home/austen/Documents/school/research/scraper/target/rls/debug/deps/libtendril-f970358069fb4428.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/austen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/austen/Documents/school/research/scraper/target/rls/debug/deps/libmarkup5ever-1cb14e63b265e005.rmeta"},"prelude":{"crate_id":{"name":"markup5ever","disambiguator":[16222345030571082164,16591284525736951371]},"crate_root":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1","external_crates":[{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":1,"id":{"name":"std","disambiguator":[14029911340352309513,3694302842271320647]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":2,"id":{"name":"core","disambiguator":[5366521311420338507,5001693844293236078]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16078967021793905033,18044181950654841110]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3256375668792353550,7694578384779899277]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17967524032803306908,5163911630854790873]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7486411228932131176,10611882423765912104]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8951493940525711481,6598059053846807751]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6080538021290120973,12135415365643254465]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[2404946192574906823,11198495443784404083]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[8156052144428984436,15205012491124168822]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[11527475684179663565,15577722846879460413]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4615572763888095747,7180296191060376175]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16051702409717455556,18428390842256153874]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14083788917415871355,15092499333930635081]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":15,"id":{"name":"log","disambiguator":[18120854042494803080,16165788460556035654]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[10509600652491765595,688247222960852956]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":17,"id":{"name":"phf","disambiguator":[10732539164745702060,15737163866194081630]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":18,"id":{"name":"phf_shared","disambiguator":[12216329970228424465,12473779228570916112]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":19,"id":{"name":"siphasher","disambiguator":[12774664291195859888,9873661603676692987]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":20,"id":{"name":"string_cache","disambiguator":[16438234956327228190,8669582860471152124]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":21,"id":{"name":"lazy_static","disambiguator":[14540100287950004670,1419756779819563627]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":22,"id":{"name":"debug_unreachable","disambiguator":[1058260142751242223,9522027322036094961]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":23,"id":{"name":"precomputed_hash","disambiguator":[17528585802032292016,5219520822931493060]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":24,"id":{"name":"serde","disambiguator":[9302349211152024028,1513451975342493472]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":25,"id":{"name":"serde_derive","disambiguator":[475374817097785796,16164125695351653828]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":26,"id":{"name":"string_cache_shared","disambiguator":[4172011606120246966,5922705678189462478]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":27,"id":{"name":"tendril","disambiguator":[17929482216289450891,13805507777232679904]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":28,"id":{"name":"mac","disambiguator":[784777546377951403,6204263744775084445]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":29,"id":{"name":"futf","disambiguator":[7473848123079231222,5773887243480184315]}},{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","num":30,"id":{"name":"utf8","disambiguator":[13673478401025742982,10301682284149252050]}}],"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":436,"byte_end":1401,"line_start":10,"line_end":51,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3423,"byte_end":3437,"line_start":14,"line_end":14,"column_start":30,"column_end":44},"alias_span":null,"name":"create_element","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3439,"byte_end":3449,"line_start":14,"line_end":14,"column_start":46,"column_end":56},"alias_span":null,"name":"AppendNode","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3451,"byte_end":3461,"line_start":14,"line_end":14,"column_start":58,"column_end":68},"alias_span":null,"name":"AppendText","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3463,"byte_end":3475,"line_start":14,"line_end":14,"column_start":70,"column_end":82},"alias_span":null,"name":"ElementFlags","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":65},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3477,"byte_end":3487,"line_start":14,"line_end":14,"column_start":84,"column_end":94},"alias_span":null,"name":"NodeOrText","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3519,"byte_end":3532,"line_start":15,"line_end":15,"column_start":30,"column_end":43},"alias_span":null,"name":"LimitedQuirks","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3534,"byte_end":3542,"line_start":15,"line_end":15,"column_start":45,"column_end":53},"alias_span":null,"name":"NoQuirks","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3544,"byte_end":3550,"line_start":15,"line_end":15,"column_start":55,"column_end":61},"alias_span":null,"name":"Quirks","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3552,"byte_end":3562,"line_start":15,"line_end":15,"column_start":63,"column_end":73},"alias_span":null,"name":"QuirksMode","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":313},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3594,"byte_end":3609,"line_start":16,"line_end":16,"column_start":30,"column_end":45},"alias_span":null,"name":"NextParserState","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3611,"byte_end":3617,"line_start":16,"line_end":16,"column_start":47,"column_end":53},"alias_span":null,"name":"Tracer","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3619,"byte_end":3627,"line_start":16,"line_end":16,"column_start":55,"column_end":63},"alias_span":null,"name":"TreeSink","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14284,"byte_end":14294,"line_start":18,"line_end":18,"column_start":28,"column_end":38},"alias_span":null,"name":"AppendNode","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14296,"byte_end":14306,"line_start":18,"line_end":18,"column_start":40,"column_end":50},"alias_span":null,"name":"AppendText","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14336,"byte_end":14349,"line_start":19,"line_end":19,"column_start":28,"column_end":41},"alias_span":null,"name":"LimitedQuirks","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14351,"byte_end":14359,"line_start":19,"line_end":19,"column_start":43,"column_end":51},"alias_span":null,"name":"NoQuirks","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14361,"byte_end":14367,"line_start":19,"line_end":19,"column_start":53,"column_end":59},"alias_span":null,"name":"Quirks","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":433},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":44971,"byte_end":44978,"line_start":25,"line_end":25,"column_start":27,"column_end":34},"alias_span":null,"name":"FromSet","value":"","parent":{"krate":0,"index":219}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":44980,"byte_end":44990,"line_start":25,"line_end":25,"column_start":36,"column_end":46},"alias_span":null,"name":"NotFromSet","value":"","parent":{"krate":0,"index":219}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1307,"byte_end":1316,"line_start":49,"line_end":49,"column_start":21,"column_end":30},"alias_span":null,"name":"Attribute","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1318,"byte_end":1330,"line_start":49,"line_end":49,"column_start":32,"column_end":44},"alias_span":null,"name":"ExpandedName","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":338},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1332,"byte_end":1340,"line_start":49,"line_end":49,"column_start":46,"column_end":54},"alias_span":null,"name":"QualName","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":453},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1371,"byte_end":1383,"line_start":50,"line_end":50,"column_start":29,"column_end":41},"alias_span":null,"name":"SmallCharSet","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1399,"byte_end":1400,"line_start":51,"line_end":51,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":436,"byte_end":1401,"line_start":10,"line_end":51,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":109},{"krate":0,"index":201},{"krate":0,"index":218},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":248},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8626398,"byte_end":8626407,"line_start":1,"line_end":1,"column_start":10,"column_end":19},"name":"LocalName","qualname":"::LocalName","value":"::string_cache::Atom<LocalNameStaticSet>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":249},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8626470,"byte_end":8626488,"line_start":2,"line_end":2,"column_start":12,"column_end":30},"name":"LocalNameStaticSet","qualname":"::LocalNameStaticSet","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":256},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8800921,"byte_end":8800927,"line_start":2205,"line_end":2205,"column_start":11,"column_end":17},"name":"Prefix","qualname":"::Prefix","value":"::string_cache::Atom<PrefixStaticSet>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8800987,"byte_end":8801002,"line_start":2206,"line_end":2206,"column_start":12,"column_end":27},"name":"PrefixStaticSet","qualname":"::PrefixStaticSet","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":264},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8802612,"byte_end":8802621,"line_start":2225,"line_end":2225,"column_start":11,"column_end":20},"name":"Namespace","qualname":"::Namespace","value":"::string_cache::Atom<NamespaceStaticSet>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8802684,"byte_end":8802702,"line_start":2226,"line_end":2226,"column_start":12,"column_end":30},"name":"NamespaceStaticSet","qualname":"::NamespaceStaticSet","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/data/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data","qualname":"::data","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/data/mod.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":273}],"decl_id":null,"docs":" Data that is known at compile-time and hard-coded into the binary.\n","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":19},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/data/mod.rs","byte_start":2100,"byte_end":2115,"line_start":15,"line_end":15,"column_start":12,"column_end":27},"name":"C1_REPLACEMENTS","qualname":"::data::C1_REPLACEMENTS","value":"[Option<char>; 32]","parent":null,"children":[],"decl_id":null,"docs":" The spec replaces most characters in the ISO-2022 C1 control code range\n (U+0080 through U+009F) with these characters, based on Windows 8-bit\n codepages.\n","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":273},"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/named_entities.rs","byte_start":8805553,"byte_end":8805567,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"NAMED_ENTITIES","qualname":"::data::NAMED_ENTITIES","value":"Map<&'static str, (u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" A map of entity names to their codepoints. The second codepoint will\n be 0 if the entity contains a single codepoint. Entities have their preceeding '&' removed.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interface","qualname":"::interface","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":35},{"krate":0,"index":39},{"krate":0,"index":274},{"krate":0,"index":290},{"krate":0,"index":287},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":278},{"krate":0,"index":43},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":338},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":351},{"krate":0,"index":349},{"krate":0,"index":346},{"krate":0,"index":344},{"krate":0,"index":342},{"krate":0,"index":106},{"krate":0,"index":372},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":381},{"krate":0,"index":379},{"krate":0,"index":377},{"krate":0,"index":375}],"decl_id":null,"docs":" Types for tag and attribute names, and tree-builder functionality.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1155,"byte_end":1167,"line_start":40,"line_end":40,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3853,"byte_end":3865,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"ExpandedName","qualname":"::interface::ExpandedName","value":"ExpandedName { ns, local }","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277}],"decl_id":null,"docs":" An [expanded name], containing the tag and the namespace.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":276},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3880,"byte_end":3882,"line_start":24,"line_end":24,"column_start":9,"column_end":11},"name":"ns","qualname":"::interface::ExpandedName::ns","value":"&'a string_cache::Atom<NamespaceStaticSet>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":277},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3907,"byte_end":3912,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"local","qualname":"::interface::ExpandedName::local","value":"&'a string_cache::Atom<LocalNameStaticSet>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tree_builder","qualname":"::interface::tree_builder","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":292},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":306},{"krate":0,"index":304},{"krate":0,"index":301},{"krate":0,"index":299},{"krate":0,"index":313},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":325},{"krate":0,"index":323},{"krate":0,"index":320},{"krate":0,"index":318},{"krate":0,"index":332},{"krate":0,"index":336},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":103}],"decl_id":null,"docs":" This module contains functionality for managing the DOM, including adding/removing nodes.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":67},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14584,"byte_end":14594,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"AppendNode","qualname":"::interface::tree_builder::NodeOrText::AppendNode","value":"NodeOrText::AppendNode(Handle)","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":70},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14608,"byte_end":14618,"line_start":27,"line_end":27,"column_start":5,"column_end":15},"name":"AppendText","qualname":"::interface::tree_builder::NodeOrText::AppendText","value":"NodeOrText::AppendText(StrTendril)","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":65},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14559,"byte_end":14569,"line_start":25,"line_end":25,"column_start":10,"column_end":20},"name":"NodeOrText","qualname":"::interface::tree_builder::NodeOrText","value":"NodeOrText::{AppendNode, AppendText}","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":70}],"decl_id":null,"docs":" Something which can be inserted into the DOM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":293},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14939,"byte_end":14945,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Quirks","qualname":"::interface::tree_builder::QuirksMode::Quirks","value":"QuirksMode::Quirks","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Full quirks mode\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":295},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14981,"byte_end":14994,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"LimitedQuirks","qualname":"::interface::tree_builder::QuirksMode::LimitedQuirks","value":"QuirksMode::LimitedQuirks","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Almost standards mode\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":297},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15023,"byte_end":15031,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"NoQuirks","qualname":"::interface::tree_builder::QuirksMode::NoQuirks","value":"QuirksMode::NoQuirks","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Standards mode\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":292},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":14897,"byte_end":14907,"line_start":35,"line_end":35,"column_start":10,"column_end":20},"name":"QuirksMode","qualname":"::interface::tree_builder::QuirksMode","value":"QuirksMode::{Quirks, LimitedQuirks, NoQuirks}","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297}],"decl_id":null,"docs":" A document's quirks mode, for compatibility with old browsers. See [quirks mode on wikipedia]\n for more information.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":314},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15309,"byte_end":15316,"line_start":50,"line_end":50,"column_start":5,"column_end":12},"name":"Suspend","qualname":"::interface::tree_builder::NextParserState::Suspend","value":"NextParserState::Suspend","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Stop further parsing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":316},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15362,"byte_end":15370,"line_start":52,"line_end":52,"column_start":5,"column_end":13},"name":"Continue","qualname":"::interface::tree_builder::NextParserState::Continue","value":"NextParserState::Continue","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Continue without interruptions.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":313},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15257,"byte_end":15272,"line_start":48,"line_end":48,"column_start":10,"column_end":25},"name":"NextParserState","qualname":"::interface::tree_builder::NextParserState","value":"NextParserState::{Suspend, Continue}","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":316}],"decl_id":null,"docs":" Whether to interrupt further parsing of the current input until\n the next explicit resumption of the tokenizer, or continue without\n any interruption.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15494,"byte_end":15506,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"ElementFlags","qualname":"::interface::tree_builder::ElementFlags","value":"ElementFlags { template, mathml_annotation_xml_integration_point }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" Special properties of an element, useful for tagging elements with this information.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":333},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":15838,"byte_end":15846,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"template","qualname":"::interface::tree_builder::ElementFlags::template","value":"bool","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" A document fragment should be created, associated with the element,\n and returned in TreeSink::get_template_contents.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":334},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":16195,"byte_end":16234,"line_start":72,"line_end":72,"column_start":9,"column_end":48},"name":"mathml_annotation_xml_integration_point","qualname":"::interface::tree_builder::ElementFlags::mathml_annotation_xml_integration_point","value":"bool","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" This boolean should be recorded with the element and returned\n in TreeSink::is_mathml_annotation_xml_integration_point","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":17352,"byte_end":17366,"line_start":108,"line_end":108,"column_start":8,"column_end":22},"name":"create_element","qualname":"::interface::tree_builder::create_element","value":"fn <Sink> (sink: &mut Sink, name: QualName, attrs: Vec<Attribute>) -> Sink::Handle","parent":null,"children":[],"decl_id":null,"docs":" A constructor for an element.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":18293,"byte_end":18301,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"name":"TreeSink","qualname":"::interface::tree_builder::TreeSink","value":"TreeSink","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"decl_id":null,"docs":" Methods a parser can use to create the DOM. The DOM provider implements this trait.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":18481,"byte_end":18487,"line_start":135,"line_end":135,"column_start":10,"column_end":16},"name":"Handle","qualname":"::interface::tree_builder::TreeSink::Handle","value":"type Handle: Clone;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" `Handle` is a reference to a DOM node.  The tree builder requires\n that a `Handle` implements `Clone` to get another reference to\n the same node.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":78},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":18718,"byte_end":18724,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"Output","qualname":"::interface::tree_builder::TreeSink::Output","value":"type Output;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The overall result of parsing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":19026,"byte_end":19032,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"finish","qualname":"::interface::tree_builder::TreeSink::finish","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Consume this sink and return the overall result of parsing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":19094,"byte_end":19105,"line_start":151,"line_end":151,"column_start":8,"column_end":19},"name":"parse_error","qualname":"::interface::tree_builder::TreeSink::parse_error","value":"fn (&mut self, msg: Cow<'static, str>) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Signal a parse error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":19195,"byte_end":19207,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"get_document","qualname":"::interface::tree_builder::TreeSink::get_document","value":"fn (&mut self) -> Self::Handle","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Get a handle to the `Document` node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":19379,"byte_end":19388,"line_start":160,"line_end":160,"column_start":8,"column_end":17},"name":"elem_name","qualname":"::interface::tree_builder::TreeSink::elem_name","value":"fn <'a> (&'a self, target: &'a Self::Handle) -> ExpandedName<'a>","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" What is the name of this element?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":19951,"byte_end":19965,"line_start":171,"line_end":171,"column_start":8,"column_end":22},"name":"create_element","qualname":"::interface::tree_builder::TreeSink::create_element","value":"fn (&mut self, name: QualName, attrs: Vec<Attribute>, flags: ElementFlags) -> Self::Handle","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Create an element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":20132,"byte_end":20146,"line_start":179,"line_end":179,"column_start":8,"column_end":22},"name":"create_comment","qualname":"::interface::tree_builder::TreeSink::create_comment","value":"fn (&mut self, text: StrTendril) -> Self::Handle","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Create a comment node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":20247,"byte_end":20256,"line_start":182,"line_end":182,"column_start":8,"column_end":17},"name":"create_pi","qualname":"::interface::tree_builder::TreeSink::create_pi","value":"fn (&mut self, target: StrTendril, data: StrTendril) -> Self::Handle","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Create a Processing Instruction node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":20561,"byte_end":20567,"line_start":189,"line_end":189,"column_start":8,"column_end":14},"name":"append","qualname":"::interface::tree_builder::TreeSink::append","value":"fn (&mut self, parent: &Self::Handle, child: NodeOrText<Self::Handle>) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Append a node as the last child of the given node.  If this would\n produce adjacent sibling text nodes, it should concatenate the text\n instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":20904,"byte_end":20931,"line_start":194,"line_end":194,"column_start":8,"column_end":35},"name":"append_based_on_parent_node","qualname":"::interface::tree_builder::TreeSink::append_based_on_parent_node","value":"fn (&mut self, element: &Self::Handle, prev_element: &Self::Handle, child: NodeOrText<Self::Handle>) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" When the insertion point is decided by the existence of a parent node of the\n element, we consider both possibilities and send the element which will be used\n if a parent node exists, along with the element to be used if there isn't one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21136,"byte_end":21162,"line_start":202,"line_end":202,"column_start":8,"column_end":34},"name":"append_doctype_to_document","qualname":"::interface::tree_builder::TreeSink::append_doctype_to_document","value":"fn (&mut self, name: StrTendril, public_id: StrTendril, system_id: StrTendril) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Append a `DOCTYPE` element to the `Document` node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21339,"byte_end":21366,"line_start":210,"line_end":210,"column_start":8,"column_end":35},"name":"mark_script_already_started","qualname":"::interface::tree_builder::TreeSink::mark_script_already_started","value":"fn (&mut self, _node: &Self::Handle) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Mark a HTML `<script>` as \"already started\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21483,"byte_end":21486,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"pop","qualname":"::interface::tree_builder::TreeSink::pop","value":"fn (&mut self, _node: &Self::Handle) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Indicate that a node was popped off the stack of open elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21700,"byte_end":21721,"line_start":218,"line_end":218,"column_start":8,"column_end":29},"name":"get_template_contents","qualname":"::interface::tree_builder::TreeSink::get_template_contents","value":"fn (&mut self, target: &Self::Handle) -> Self::Handle","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Get a handle to a template's template contents. The tree builder\n promises this will never be called with something else than\n a template element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21828,"byte_end":21837,"line_start":221,"line_end":221,"column_start":8,"column_end":17},"name":"same_node","qualname":"::interface::tree_builder::TreeSink::same_node","value":"fn (&self, x: &Self::Handle, y: &Self::Handle) -> bool","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Do two handles refer to the same node?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":21938,"byte_end":21953,"line_start":224,"line_end":224,"column_start":8,"column_end":23},"name":"set_quirks_mode","qualname":"::interface::tree_builder::TreeSink::set_quirks_mode","value":"fn (&mut self, mode: QuirksMode) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Set the document's quirks mode.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":22458,"byte_end":22479,"line_start":234,"line_end":234,"column_start":8,"column_end":29},"name":"append_before_sibling","qualname":"::interface::tree_builder::TreeSink::append_before_sibling","value":"fn (&mut self, sibling: &Self::Handle, new_node: NodeOrText<Self::Handle>) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Append a node as the sibling immediately before the given node.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":22761,"byte_end":22781,"line_start":239,"line_end":239,"column_start":8,"column_end":28},"name":"add_attrs_if_missing","qualname":"::interface::tree_builder::TreeSink::add_attrs_if_missing","value":"fn (&mut self, target: &Self::Handle, attrs: Vec<Attribute>) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Add each attribute to the given element, if no attribute with that name\n already exists. The tree builder promises this will never be called\n with something else than an element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":22924,"byte_end":22943,"line_start":242,"line_end":242,"column_start":8,"column_end":27},"name":"associate_with_form","qualname":"::interface::tree_builder::TreeSink::associate_with_form","value":"fn (&mut self, _target: &Self::Handle, _form: &Self::Handle, _nodes: (&Self::Handle, Option<&Self::Handle>)) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Associate the given form-associatable element with the form element\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23151,"byte_end":23169,"line_start":251,"line_end":251,"column_start":8,"column_end":26},"name":"remove_from_parent","qualname":"::interface::tree_builder::TreeSink::remove_from_parent","value":"fn (&mut self, target: &Self::Handle) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Detach the given node from its parent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23286,"byte_end":23303,"line_start":254,"line_end":254,"column_start":8,"column_end":25},"name":"reparent_children","qualname":"::interface::tree_builder::TreeSink::reparent_children","value":"fn (&mut self, node: &Self::Handle, new_parent: &Self::Handle) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Remove all the children from node and append them to new_parent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23489,"byte_end":23531,"line_start":258,"line_end":258,"column_start":8,"column_end":50},"name":"is_mathml_annotation_xml_integration_point","qualname":"::interface::tree_builder::TreeSink::is_mathml_annotation_xml_integration_point","value":"fn (&self, _handle: &Self::Handle) -> bool","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Returns true if the adjusted current node is an HTML integration point\n and the token is a start tag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23650,"byte_end":23666,"line_start":263,"line_end":263,"column_start":8,"column_end":24},"name":"set_current_line","qualname":"::interface::tree_builder::TreeSink::set_current_line","value":"fn (&mut self, _line_number: u64) -> ()","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Called whenever the line number changes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23762,"byte_end":23777,"line_start":266,"line_end":266,"column_start":8,"column_end":23},"name":"complete_script","qualname":"::interface::tree_builder::TreeSink::complete_script","value":"fn (&mut self, _node: &Self::Handle) -> NextParserState","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Indicate that a `script` element is complete.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23930,"byte_end":23936,"line_start":272,"line_end":272,"column_start":11,"column_end":17},"name":"Tracer","qualname":"::interface::tree_builder::Tracer","value":"Tracer","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"decl_id":null,"docs":" Trace hooks for a garbage-collected DOM.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":23948,"byte_end":23954,"line_start":273,"line_end":273,"column_start":10,"column_end":16},"name":"Handle","qualname":"::interface::tree_builder::Tracer::Handle","value":"type Handle;","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/tree_builder.rs","byte_start":24090,"byte_end":24102,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"trace_handle","qualname":"::interface::tree_builder::Tracer::trace_handle","value":"fn (&self, node: &Self::Handle) -> ()","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Upon a call to `trace_handles`, the tree builder will call this method\n for each handle in its internal state.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":338},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":6546,"byte_end":6554,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"QualName","qualname":"::interface::QualName","value":"QualName { prefix, ns, local }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"decl_id":null,"docs":" A fully qualified name (with a namespace), used to depict names of tags and attributes.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":339},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":7217,"byte_end":7223,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"name":"prefix","qualname":"::interface::QualName::prefix","value":"std::option::Option<string_cache::Atom<PrefixStaticSet>>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" The prefix of qualified (e.g. `furn` in `<furn:table>` above).\n Optional (since some namespaces can be empty or inferred), and\n only useful for namespace resolution (since different prefix \n can still resolve to same namespace)","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":340},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":8393,"byte_end":8395,"line_start":192,"line_end":192,"column_start":9,"column_end":11},"name":"ns","qualname":"::interface::QualName::ns","value":"string_cache::Atom<NamespaceStaticSet>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" The namespace after resolution (e.g. `https://furniture.rs` in example above).\n \n ```\n # use markup5ever::{QualName, Namespace, LocalName, Prefix};\n \n # fn main() {\n # let qual = QualName::new(\n #    Some(Prefix::from(\"furn\")),\n #    Namespace::from(\"https://furniture.rs\"),\n #    LocalName::from(\"table\"),\n # );\n \n assert_eq!(\"https://furniture.rs\", &qual.ns);\n # }\n ```\n \n When matching namespaces used by HTML we can use `ns!` macro. \n Although keep in mind that ns! macro only works with namespaces\n that are present in HTML spec (like `html`, `xmlns`, `svg`, etc.).\n \n ```\n #[macro_use] extern crate markup5ever;\n \n # use markup5ever::{QualName, Namespace, LocalName, Prefix};\n \n let html_table = QualName::new(\n    None,\n    ns!(html),\n    LocalName::from(\"table\"),\n );\n \n assert!(\n   match html_table.ns {\n     ns!(html) => true,\n     _ => false,\n   }\n );\n \n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":341},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":9493,"byte_end":9498,"line_start":231,"line_end":231,"column_start":9,"column_end":14},"name":"local","qualname":"::interface::QualName::local","value":"string_cache::Atom<LocalNameStaticSet>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" The local name (e.g. `table` in `<furn:table>` above).\n \n ```\n # use markup5ever::{QualName, Namespace, LocalName, Prefix};\n \n # fn main() {\n # let qual = QualName::new(\n #    Some(Prefix::from(\"furn\")),\n #    Namespace::from(\"https://furniture.rs\"),\n #    LocalName::from(\"table\"),\n # );\n \n assert_eq!(\"table\", &qual.local);\n # }\n ```\n When matching local name we can also use the `local_name!` macro:\n \n ```\n #[macro_use] extern crate markup5ever;\n \n # use markup5ever::{QualName, Namespace, LocalName, Prefix};\n \n # let qual = QualName::new(\n #    Some(Prefix::from(\"furn\")),\n #    Namespace::from(\"https://furniture.rs\"),\n #    LocalName::from(\"table\"),\n # );\n \n // Initialize qual to furniture example \n \n assert!(\n   match qual.local {\n     local_name!(\"table\") => true,\n     _ => false,\n   }\n );\n \n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":11195,"byte_end":11198,"line_start":289,"line_end":289,"column_start":12,"column_end":15},"name":"new","qualname":"<QualName>::new","value":"fn (prefix: Option<Prefix>, ns: Namespace, local: LocalName) -> QualName","parent":null,"children":[],"decl_id":null,"docs":" Basic constructor function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":11174,"byte_end":11183,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":12124,"byte_end":12132,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"expanded","qualname":"<QualName>::expanded","value":"fn (&self) -> ExpandedName","parent":null,"children":[],"decl_id":null,"docs":" Take a reference of `self` as an `ExpandedName`, dropping the unresolved prefix.\n \n In XML and HTML prefixes are only used to extract the relevant namespace URI.\n Expanded name only contains resolved namespace and tag name, which are only\n relevant parts of an XML or HTML tag and attribute name respectively.\n \n In lieu of our XML Namespace example\n \n ```text\n <furn:table> <!-- namespace url is https://furniture.rs -->\n ```\n For it the expanded name would become roughly equivalent to:\n \n ```text\n ExpandedName {\n    ns: \"https://furniture.rs\",\n    local: \"table\",\n }\n ```\n \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":12103,"byte_end":12112,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":12619,"byte_end":12628,"line_start":333,"line_end":333,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::interface::Attribute","value":"Attribute { name, value }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" A tag attribute, e.g. `class=\"test\"` in `<div class=\"test\" ...>`.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":373},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":12716,"byte_end":12720,"line_start":335,"line_end":335,"column_start":9,"column_end":13},"name":"name","qualname":"::interface::Attribute::name","value":"interface::QualName","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" The name of the attribute (e.g. the `class` in `<div class=\"test\">`)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":374},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":12819,"byte_end":12824,"line_start":337,"line_end":337,"column_start":9,"column_end":14},"name":"value","qualname":"::interface::Attribute::value","value":"tendril::Tendril<tendril::fmt::UTF8>","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" The value of the attribute (e.g. the `\"test\"` in `<div class=\"test\">`)\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":109},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rcdom","qualname":"::rcdom","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":398},{"krate":0,"index":417},{"krate":0,"index":139},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":197}],"decl_id":null,"docs":" A simple reference-counted DOM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26229,"byte_end":26237,"line_start":63,"line_end":63,"column_start":5,"column_end":13},"name":"Document","qualname":"::rcdom::NodeData::Document","value":"NodeData::Document","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" The `Document` itself - the root node of a HTML document.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":401},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26449,"byte_end":26456,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Doctype","qualname":"::rcdom::NodeData::Doctype","value":"NodeData::Doctype { name, public_id, system_id }","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" A `DOCTYPE` with name, public id, and system id. See\n [document type declaration on wikipedia][dtd wiki].","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":405},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26580,"byte_end":26584,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Text","qualname":"::rcdom::NodeData::Text","value":"NodeData::Text { contents }","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" A text node.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":407},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26644,"byte_end":26651,"line_start":79,"line_end":79,"column_start":5,"column_end":12},"name":"Comment","qualname":"::rcdom::NodeData::Comment","value":"NodeData::Comment { contents }","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" A comment.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":409},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26719,"byte_end":26726,"line_start":82,"line_end":82,"column_start":5,"column_end":12},"name":"Element","qualname":"::rcdom::NodeData::Element","value":"NodeData::Element { name, attrs, template_contents, mathml_annotation_xml_integration_point }","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" An element with attributes.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":414},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27284,"byte_end":27305,"line_start":98,"line_end":98,"column_start":5,"column_end":26},"name":"ProcessingInstruction","qualname":"::rcdom::NodeData::ProcessingInstruction","value":"NodeData::ProcessingInstruction { target, contents }","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" A Processing instruction.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":398},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":26148,"byte_end":26156,"line_start":61,"line_end":61,"column_start":10,"column_end":18},"name":"NodeData","qualname":"::rcdom::NodeData","value":"NodeData::{Document, Doctype, Text, Comment, Element, ProcessingInstruction}","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":414}],"decl_id":null,"docs":" The different kinds of nodes in the DOM.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":139},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27403,"byte_end":27407,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"Node","qualname":"::rcdom::Node","value":"Node { parent, children, data }","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" A DOM node.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":140},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27439,"byte_end":27445,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"parent","qualname":"::rcdom::Node::parent","value":"std::cell::Cell<std::option::Option<std::rc::Weak<rcdom::Node>>>","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" Parent node.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":141},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27515,"byte_end":27523,"line_start":109,"line_end":109,"column_start":9,"column_end":17},"name":"children","qualname":"::rcdom::Node::children","value":"std::cell::RefCell<std::vec::Vec<std::rc::Rc<rcdom::Node>>>","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" Child nodes of this node.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":142},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27592,"byte_end":27596,"line_start":111,"line_end":111,"column_start":9,"column_end":13},"name":"data","qualname":"::rcdom::Node::data","value":"rcdom::NodeData","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" Represents this node's data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27786,"byte_end":27789,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<Node>::new","value":"fn (data: NodeData) -> Rc<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new node from its contents\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":28693,"byte_end":28717,"line_start":138,"line_end":138,"column_start":19,"column_end":43},"name":"free_child_nodes_on_drop","qualname":"<Node>::free_child_nodes_on_drop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drop any child nodes remaining in this node at destruction.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":151},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":29552,"byte_end":29558,"line_start":167,"line_end":167,"column_start":10,"column_end":16},"name":"Handle","qualname":"::rcdom::Handle","value":"Rc<Node>","parent":null,"children":[],"decl_id":null,"docs":" Reference to a DOM node.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":152},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":29641,"byte_end":29651,"line_start":170,"line_end":170,"column_start":10,"column_end":20},"name":"WeakHandle","qualname":"::rcdom::WeakHandle","value":"Weak<Node>","parent":null,"children":[],"decl_id":null,"docs":" Weak reference to a DOM node, used for parent pointers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31162,"byte_end":31167,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"RcDom","qualname":"::rcdom::RcDom","value":"RcDom { document, errors, quirks_mode }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"decl_id":null,"docs":" The DOM itself; the result of parsing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":159},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31209,"byte_end":31217,"line_start":221,"line_end":221,"column_start":9,"column_end":17},"name":"document","qualname":"::rcdom::RcDom::document","value":"std::rc::Rc<rcdom::Node>","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The `Document` itself.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":160},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31281,"byte_end":31287,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"name":"errors","qualname":"::rcdom::RcDom::errors","value":"std::vec::Vec<std::borrow::Cow<'static, str>>","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Errors that occurred during parsing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":161},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31358,"byte_end":31369,"line_start":227,"line_end":227,"column_start":9,"column_end":20},"name":"quirks_mode","qualname":"::rcdom::RcDom::quirks_mode","value":"interface::tree_builder::QuirksMode","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The document's quirks mode.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":201},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serialize","qualname":"::serialize","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":420},{"krate":0,"index":430},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":216}],"decl_id":null,"docs":" Traits for serializing elements. The serializer expects the data to be xml-like (with a name,\n and optional children, attrs, text, comments, doctypes, and [processing instructions]). It uses\n the visitor pattern, where the serializer and the serializable objects are decoupled and\n implement their own traits.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":41767,"byte_end":41778,"line_start":24,"line_end":24,"column_start":5,"column_end":16},"name":"IncludeNode","qualname":"::serialize::TraversalScope::IncludeNode","value":"TraversalScope::IncludeNode","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Include the parent node when serializing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42098,"byte_end":42110,"line_start":31,"line_end":31,"column_start":5,"column_end":17},"name":"ChildrenOnly","qualname":"::serialize::TraversalScope::ChildrenOnly","value":"TraversalScope::ChildrenOnly(Option<QualName>)","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Only serialize the children of the node, treating any provided qualified name as the\n parent while serializing.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":420},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":41696,"byte_end":41710,"line_start":22,"line_end":22,"column_start":10,"column_end":24},"name":"TraversalScope","qualname":"::serialize::TraversalScope","value":"TraversalScope::{IncludeNode, ChildrenOnly}","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":423}],"decl_id":null,"docs":" Used as a parameter to `serialize`, telling it if we want to skip the parent.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":204},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42253,"byte_end":42262,"line_start":36,"line_end":36,"column_start":11,"column_end":20},"name":"Serialize","qualname":"::serialize::Serialize","value":"Serialize","parent":null,"children":[{"krate":0,"index":205}],"decl_id":null,"docs":" Types that can be serialized (according to the xml-like scheme in `Serializer`) implement this\n trait.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42426,"byte_end":42435,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialize::Serialize::serialize","value":"fn <S> (&self, serializer: &mut S, traversal_scope: TraversalScope) -> io::Result<()>","parent":{"krate":0,"index":204},"children":[],"decl_id":null,"docs":" Take the serializer and call its methods to serialize this type. The type will dictate\n which methods are called and with what parameters.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":207},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42626,"byte_end":42636,"line_start":45,"line_end":45,"column_start":11,"column_end":21},"name":"Serializer","qualname":"::serialize::Serializer","value":"Serializer","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":" Types that are capable of serializing implement this trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42723,"byte_end":42733,"line_start":47,"line_end":47,"column_start":8,"column_end":18},"name":"start_elem","qualname":"::serialize::Serializer::start_elem","value":"fn <'a, AttrIter> (&mut self, name: QualName, attrs: AttrIter) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize the start of an element, for example `<div class=\"test\">`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":42939,"byte_end":42947,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"end_elem","qualname":"::serialize::Serializer::end_elem","value":"fn (&mut self, name: QualName) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize the end of an element, for example `</div>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":43039,"byte_end":43049,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"write_text","qualname":"::serialize::Serializer::write_text","value":"fn (&mut self, text: &str) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize a plain text node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":43166,"byte_end":43179,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"write_comment","qualname":"::serialize::Serializer::write_comment","value":"fn (&mut self, text: &str) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize a comment node, for example `<!-- comment -->`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":43295,"byte_end":43308,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"write_doctype","qualname":"::serialize::Serializer::write_doctype","value":"fn (&mut self, name: &str) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize a doctype node, for example `<!doctype html>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":43483,"byte_end":43511,"line_start":65,"line_end":65,"column_start":8,"column_end":36},"name":"write_processing_instruction","qualname":"::serialize::Serializer::write_processing_instruction","value":"fn (&mut self, target: &str, data: &str) -> io::Result<()>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Serialize a processing instruction node, for example\n `<?xml-stylesheet type=\"text/xsl\" href=\"style.xsl\"?>`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":216},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/serialize.rs","byte_start":43972,"byte_end":43979,"line_start":75,"line_end":75,"column_start":10,"column_end":17},"name":"AttrRef","qualname":"::serialize::AttrRef","value":"(&'a QualName, &'a str)","parent":null,"children":[],"decl_id":null,"docs":" A type alias for an attribute name and value (e.g. the `class=\"test\"` in `<div class=\"test\">`\n is represented as `(<QualName of type class>, \"test\")`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":219},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer_queue","qualname":"::util::buffer_queue","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":432},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":439},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":226}],"decl_id":null,"docs":" The `BufferQueue` struct and helper types.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45406,"byte_end":45413,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"FromSet","qualname":"::util::buffer_queue::SetResult::FromSet","value":"SetResult::FromSet(char)","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" A character from the `SmallCharSet`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":436},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45499,"byte_end":45509,"line_start":38,"line_end":38,"column_start":5,"column_end":15},"name":"NotFromSet","qualname":"::util::buffer_queue::SetResult::NotFromSet","value":"SetResult::NotFromSet(StrTendril)","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" A string buffer containing no characters from the `SmallCharSet`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":432},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45345,"byte_end":45354,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"name":"SetResult","qualname":"::util::buffer_queue::SetResult","value":"SetResult::{FromSet, NotFromSet}","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":436}],"decl_id":null,"docs":" Result from [`pop_except_from`] containing either a character from a [`SmallCharSet`], or a\n string buffer of characters not from the set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":448},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45807,"byte_end":45818,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"BufferQueue","qualname":"::util::buffer_queue::BufferQueue","value":"BufferQueue {  }","parent":null,"children":[{"krate":0,"index":449}],"decl_id":null,"docs":" A queue of owned string buffers, which supports incrementally consuming characters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45968,"byte_end":45971,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferQueue>::new","value":"fn () -> BufferQueue","parent":null,"children":[],"decl_id":null,"docs":" Create an empty BufferQueue.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45947,"byte_end":45956,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46149,"byte_end":46157,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BufferQueue>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the queue is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46128,"byte_end":46137,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46293,"byte_end":46302,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<BufferQueue>::pop_front","value":"fn (&mut self) -> Option<StrTendril>","parent":null,"children":[],"decl_id":null,"docs":" Get the buffer at the beginning of the queue.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46272,"byte_end":46281,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46501,"byte_end":46511,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"push_front","qualname":"<BufferQueue>::push_front","value":"fn (&mut self, buf: StrTendril) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a buffer to the beginning of the queue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":46764,"byte_end":46773,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"push_back","qualname":"<BufferQueue>::push_back","value":"fn (&mut self, buf: StrTendril) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a buffer to the end of the queue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":47012,"byte_end":47016,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"peek","qualname":"<BufferQueue>::peek","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Look at the next available character without removing it, if the queue is not empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":47550,"byte_end":47554,"line_start":109,"line_end":109,"column_start":12,"column_end":16},"name":"next","qualname":"<BufferQueue>::next","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Get the next character if one is available, removing it from the queue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":49282,"byte_end":49297,"line_start":152,"line_end":152,"column_start":12,"column_end":27},"name":"pop_except_from","qualname":"<BufferQueue>::pop_except_from","value":"fn (&mut self, set: SmallCharSet) -> Option<SetResult>","parent":null,"children":[],"decl_id":null,"docs":" Pops and returns either a single character from the given set, or\n a buffer of characters none of which are in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":51051,"byte_end":51054,"line_start":202,"line_end":202,"column_start":12,"column_end":15},"name":"eat","qualname":"<BufferQueue>::eat","value":"fn <F> (&mut self, pat: &str, eq: F) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Consume bytes matching the pattern, using a custom comparison function `eq`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":238},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"smallcharset","qualname":"::util::smallcharset","value":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":468},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":459},{"krate":0,"index":458},{"krate":0,"index":455},{"krate":0,"index":239}],"decl_id":null,"docs":" This module contains a single struct [`SmallCharSet`]. See its documentation for details.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":453},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":55149,"byte_end":55161,"line_start":19,"line_end":19,"column_start":12,"column_end":24},"name":"SmallCharSet","qualname":"::util::smallcharset::SmallCharSet","value":"SmallCharSet { bits }","parent":null,"children":[{"krate":0,"index":454}],"decl_id":null,"docs":" Represents a set of \"small characters\", those with Unicode scalar\n values less than 64.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":454},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":55172,"byte_end":55176,"line_start":20,"line_end":20,"column_start":9,"column_end":13},"name":"bits","qualname":"::util::smallcharset::SmallCharSet::bits","value":"u64","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":56432,"byte_end":56452,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"name":"nonmember_prefix_len","qualname":"<SmallCharSet>::nonmember_prefix_len","value":"fn (&self, buf: &str) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Count the number of bytes of characters at the beginning of `buf` which are not in the set.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8626533,"byte_end":8626551,"line_start":3,"line_end":3,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8801047,"byte_end":8801062,"line_start":2207,"line_end":2207,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8802747,"byte_end":8802765,"line_start":2227,"line_end":2227,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3977,"byte_end":3989,"line_start":28,"line_end":28,"column_start":46,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":4139,"byte_end":4151,"line_start":34,"line_end":34,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":9519,"byte_end":9527,"line_start":234,"line_end":234,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27724,"byte_end":27728,"line_start":116,"line_end":116,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":28797,"byte_end":28801,"line_start":143,"line_end":143,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":29296,"byte_end":29300,"line_start":157,"line_end":157,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31400,"byte_end":31405,"line_start":230,"line_end":230,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31835,"byte_end":31840,"line_start":242,"line_end":242,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":38132,"byte_end":38137,"line_start":455,"line_end":455,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":38412,"byte_end":38418,"line_start":470,"line_end":470,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45892,"byte_end":45903,"line_start":52,"line_end":52,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":55191,"byte_end":55203,"line_start":23,"line_end":23,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1149,"byte_end":1153,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1176,"byte_end":1185,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":21}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":5092,"byte_end":5104,"line_start":78,"line_end":78,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1195,"byte_end":1200,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":109}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1210,"byte_end":1219,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":201}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1244,"byte_end":1256,"line_start":45,"line_end":45,"column_start":13,"column_end":25},"ref_id":{"krate":0,"index":219}},{"kind":"Mod","span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/lib.rs","byte_start":1270,"byte_end":1282,"line_start":46,"line_end":46,"column_start":13,"column_end":25},"ref_id":{"krate":0,"index":238}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8626533,"byte_end":8626551,"line_start":3,"line_end":3,"column_start":43,"column_end":61},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":249},"to":{"krate":20,"index":79}},{"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8801047,"byte_end":8801062,"line_start":2207,"line_end":2207,"column_start":43,"column_end":58},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":257},"to":{"krate":20,"index":79}},{"span":{"file_name":"/home/austen/Documents/school/research/scraper/target/rls/debug/build/markup5ever-e5310f967a24fe0c/out/generated.rs","byte_start":8802747,"byte_end":8802765,"line_start":2227,"line_end":2227,"column_start":43,"column_end":61},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":265},"to":{"krate":20,"index":79}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":3977,"byte_end":3989,"line_start":28,"line_end":28,"column_start":46,"column_end":58},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":274},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":4139,"byte_end":4151,"line_start":34,"line_end":34,"column_start":25,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":274},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/interface/mod.rs","byte_start":9519,"byte_end":9527,"line_start":234,"line_end":234,"column_start":6,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":27724,"byte_end":27728,"line_start":116,"line_end":116,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":28797,"byte_end":28801,"line_start":143,"line_end":143,"column_start":15,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":139},"to":{"krate":2,"index":1731}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":29296,"byte_end":29300,"line_start":157,"line_end":157,"column_start":21,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":139},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31400,"byte_end":31405,"line_start":230,"line_end":230,"column_start":15,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":1731}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":31835,"byte_end":31840,"line_start":242,"line_end":242,"column_start":19,"column_end":24},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":158},"to":{"krate":0,"index":76}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":38132,"byte_end":38137,"line_start":455,"line_end":455,"column_start":18,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":2210}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/rcdom.rs","byte_start":38412,"byte_end":38418,"line_start":470,"line_end":470,"column_start":20,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":151},"to":{"krate":0,"index":204}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/buffer_queue.rs","byte_start":45892,"byte_end":45903,"line_start":52,"line_end":52,"column_start":6,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/austen/.cargo/registry/src/github.com-1ecc6299db9ec823/markup5ever-0.8.1/util/smallcharset.rs","byte_start":55191,"byte_end":55203,"line_start":23,"line_end":23,"column_start":6,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":453},"to":{"krate":4294967295,"index":4294967295}}]}